/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    /*
    1->4->5  0 
          ^
    1->3->4  1
          ^
    2->6     2
    
    mid = 1
    */
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists==null||lists.length==0) return null;
        return partition(lists,0,lists.length-1);
    }
    private ListNode partition(ListNode[] lists,int st,int end){
        if(st==end) return lists[st];
        if(st<end){
            int mid = st + (end-st)/2;
            ListNode left = partition(lists,st,mid);
            ListNode right = partition(lists,mid+1,end);
            return merge(left,right);
        }else{
            return null;
        }
       
    }

    private ListNode merge(ListNode l1,ListNode l2){
        if(l1==null) return l2;
        else if(l2==null) return l1;
        else{
            if(l1.val<=l2.val){
                l1.next= merge(l2,l1.next);
                return l1;
            }else{
                l2.next = merge(l1,l2.next);
                return l2;
            }
        }
    }
}