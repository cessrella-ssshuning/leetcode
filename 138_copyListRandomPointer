/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
       if(head==null) return null;
        Map<Node,Node> map = new HashMap<>();
        return dfs(head,map);//这个map是用来存放copy的node的
        
    }
    private Node dfs(Node node,Map<Node,Node> map){
        if(node==null) return null;
        if(map.containsKey(node)) return map.get(node);
        Node copy = new Node(node.val);
        map.put(node,copy);//存的是已经copy过的东西
        copy.next = dfs(node.next,map);
        copy.random = dfs(node.random,map);
        return copy;
    }
}