class Solution {
    TrieNode root;
    Set<String> set;
    public List<String> findWords(char[][] board, String[] words) {
        root = new TrieNode();
        set = new HashSet<>();
        for(String word:words){
            TrieNode node = root;
            for(int i = 0;i<word.length();i++){
                char c = word.charAt(i);
                if(node.next[c-'a']==null){
                    node.next[c-'a'] = new TrieNode();
                } 
                node = node.next[c-'a'];
            }
            node.isEnd = true;
        }
        for(int i = 0;i<board.length;i++){
            for(int j = 0;j<board[0].length;j++){
                dfs(root,board,i,j,new StringBuilder());
            }
        }
        List<String> res = new ArrayList<>();
        res.addAll(set);
        return res;
    }
    int[][] dirs = new int[][]{{1,0},{0,1},{-1,0},{0,-1}};
    private void dfs(TrieNode node,char[][] board,int i,int j,StringBuilder sb){
        if(i<0||i>=board.length||j<0||j>=board[0].length||board[i][j]=='0'||node==null||node.next[board[i][j]-'a']==null) return;
        char c = board[i][j];
        sb.append(c);
        node = node.next[c-'a'];
        if(node.isEnd) set.add(sb.toString());
        
        board[i][j] = '0';
        for(int[] dir:dirs){
            int x = dir[0]+i;
            int y = dir[1]+j;
            dfs(node,board,x,y,sb);
        }
        board[i][j] = c;
        sb.deleteCharAt(sb.length()-1);
    }
}
class TrieNode{
    TrieNode[] next;
    boolean isEnd;
    public TrieNode(){
        next = new TrieNode[26];
        isEnd = false;
    }
}