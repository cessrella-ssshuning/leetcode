class Solution {
    /*
    4 1 2
    5 0 3
    
    */
    public int slidingPuzzle(int[][] board) {
        StringBuilder sb = new StringBuilder();
        for(int i = 0;i<board.length;i++){
            for(int j = 0;j<board[0].length;j++){
                sb.append(board[i][j]);
            }
        }
        Queue<String> queue = new LinkedList<>();
        queue.offer(sb.toString());
                Set<String> visited = new HashSet<>();
        visited.add(sb.toString());
        int step = 0;
        int[][] dirs = new int[][]{{1,0},{0,1},{0,-1},{-1,0}};
        while(!queue.isEmpty()){
            int size = queue.size();

            for(int i = 0;i<size;i++){
                String s = queue.poll();
                if(s.equals("123450")) return step;
                
                char[] sArr = s.toCharArray();
                int zero = s.indexOf('0');
                int x = zero/3;
                int y = zero%3;
                for(int[] dir:dirs){
                   // System.out.println(s+","+zero);
                    int m = dir[0]+x;
                    int n = dir[1]+y;
                    if(m<0||m>1||n<0||n>2) continue;
                    int idx = m*3+n;
                    
                    String newS = swap(s,zero,idx);
                    if(visited.contains(newS)) continue;
                    visited.add(newS);
                    queue.offer(newS);
                 //   System.out.println(s);
                }  
                
            }
            step++;
        }
        return -1;
    }
    private String swap(String str, int i, int j) {
        StringBuilder sb = new StringBuilder(str);
        sb.setCharAt(i, str.charAt(j));
        sb.setCharAt(j, str.charAt(i));
        return sb.toString();
    }
}