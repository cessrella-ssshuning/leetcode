class Solution {
    /*
     7     5      2
    6     11    5
    1     1   6
     i m-3
     j n-1

    res[i][j]+dungeon[i][j]>0
    */
    public int calculateMinimumHP(int[][] dungeon) {
        int initial = 0;
        int m = dungeon.length;
        int n = dungeon[0].length;
        int[][] dp = new int[m][n];
        for(int i = m-1;i>=0;i--){
            for(int j = n-1;j>=0;j--){
                //min value to get to the right bottom from next point
                if(i==m-1&&j==n-1){
                    dp[i][j]= getHealth(1,dungeon[i][j]);
                }else if(i==m-1){
                    dp[i][j] = getHealth(dp[i][j+1],dungeon[i][j]);
                }else if(j==n-1){
                    dp[i][j] = getHealth(dp[i+1][j],dungeon[i][j]);
                }else{
                    int min = Math.min(dp[i][j+1],dp[i+1][j]);
                    dp[i][j] = getHealth(min,dungeon[i][j]);
                }       
            }
        }
        return dp[0][0];
        
    }
    private int getHealth(int lastVal,int curVal){
        int res = 0;
        if(curVal<=0){
            res = lastVal-curVal;
        }else{
            res = Math.max(lastVal-curVal,1);
        }
        return res;
    }
}