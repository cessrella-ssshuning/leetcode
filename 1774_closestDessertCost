class Solution {
    int res = Integer.MAX_VALUE;
    public int closestCost(int[] baseCosts, int[] toppingCosts, int target) {
        for(int i = 0;i<baseCosts.length;i++){
            dfs(baseCosts[i],toppingCosts,target,0);
        }
        return res;
    }
    private void dfs(int cost,int[] toppingCosts,int target,int i){
        if(Math.abs(target-cost)<Math.abs(target-res)||Math.abs(target-cost)==Math.abs(target-res)&&cost<res) res = cost;
        if(i==toppingCosts.length) return; 
        
        for(int j = i;j<toppingCosts.length;j++){
            dfs(cost,toppingCosts,target,j+1);
            dfs(cost+toppingCosts[j],toppingCosts,target,j+1);
            dfs(cost+toppingCosts[j]*2,toppingCosts,target,j+1);        
        }
    }
}