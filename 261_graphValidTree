class Solution {
    /*
     0
 1   2   3
 4
    0 - (1,2,3)
    1 - (0,4)
    2 - (0)
    3 - (0)
    4 - (0)
    visited(t,t,f,f,t)
    */
    public boolean validTree(int n, int[][] edges) {
         boolean[] visited = new boolean[n];
         Map<Integer,List<Integer>> graph = new HashMap<>();
        if(edges.length!=n-1) return false;
         for(int[] edge:edges){
             graph.putIfAbsent(edge[0],new ArrayList<>());
             graph.get(edge[0]).add(edge[1]);
             graph.putIfAbsent(edge[1],new ArrayList<>());
             graph.get(edge[1]).add(edge[0]);
         }
         visited[0]  = true;
         dfs(0,graph,visited);
         for(int i = 0;i<visited.length;i++){
             if(!visited[i]) return false;
         }
        
         return true;
    }
    private void dfs(int n,Map<Integer,List<Integer>> graph,boolean[] visited){
        if(!graph.containsKey(n)) return;
        for(int i = 0;i<graph.get(n).size();i++){
            int node = graph.get(n).get(i);
            if(visited[node]) continue;
            visited[node] = true;
            dfs(node,graph,visited);
        }
    }
}
/*
union find 解法
*/
class Solution {
    public boolean validTree(int n, int[][] edges) {
        boolean[] visited = new boolean[n];
        UnionFind uf = new UnionFind(n);
        if(edges.length!=n-1) return false;
        for(int[] edge:edges){
            if(uf.connected(edge[0],edge[1])){
                return false;//have cycle  
            }
            uf.union(edge[0],edge[1]);
            visited[edge[0]] = true;
            visited[edge[1]] = true;
        }
        
        return true;
    }
}
class UnionFind{
        private int[] root;
        public UnionFind(int n){
            root = new int[n];
            for(int i = 0;i<n;i++){
                root[i] = i;
            }
        }
        public void union(int x,int y){
            int rootX = find(x);
            int rootY = find(y);
            if(rootX!=rootY){  
                root[rootY] = rootX;
            }
        }
        private int find(int x){
            while(root[x]!=x){
                x = root[x];
            }
            return x;
        }
        public boolean connected(int x,int y){
            return find(x)==find(y);
        }
    }