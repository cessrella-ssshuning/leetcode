/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
        3
     9     20
        15    7
     3 - 9
       - 20 - 15
            - 7
    
       
 */
class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if(root==null) return res;
        Queue<TreeNode> levelQueue = new LinkedList<>();
        Queue<Integer> cols = new LinkedList<>();
        Map<Integer,List<Integer>> map = new HashMap<>();
        levelQueue.offer(root);
        cols.offer(0);
        int min = 0;
        int max = 0;
        while(!levelQueue.isEmpty()){
            TreeNode node = levelQueue.poll();
            int col = cols.poll();
            map.putIfAbsent(col,new ArrayList<>());
            map.get(col).add(node.val);
            if(node.left!=null){
                levelQueue.offer(node.left);
                cols.offer(col-1);
                min = Math.min(min,col-1);
            }
            if(node.right!=null){
                levelQueue.offer(node.right);
                cols.offer(col+1);
                max = Math.max(max,col+1);
            }
        }
        for(int i = min;i<=max;i++){
            res.add(map.get(i));
        } 
        return res;
    }
}