class Solution {
    public int largestBSTSubtree(TreeNode root) {
      
        if(root==null) return 0;

        if(isValid(root,Integer.MIN_VALUE,Integer.MAX_VALUE)) return count(root);
        else return Math.max(largestBSTSubtree(root.left),largestBSTSubtree(root.right));
    }
    private int count(TreeNode node){
        if(node==null) return 0;
        return 1+count(node.left)+count(node.right);
    }
    private boolean isValid(TreeNode node,int min,int max){
        if(node==null) return true;
        
        if(node.val>=max||node.val<=min) return false;
        return isValid(node.left,min,node.val)&isValid(node.right,node.val,max);
    }
}