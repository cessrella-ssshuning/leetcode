class Solution {
    /*
    [-1,3,3,5,7,6,0,0]
     0  1 2 3 4 5 6 7
      
      [-1,2,0,2,0]
    */
    public int countHighestScoreNodes(int[] parents) {
        Map<Integer,List<Integer>> map = new HashMap<>();
        for(int i = 1;i<parents.length;i++){
            map.putIfAbsent(parents[i],new ArrayList<>());
            map.get(parents[i]).add(i);
        }
        scoreMap = new HashMap<>();
        max = 0;
        calculateScore(map,0,parents.length);
        return scoreMap.get(max).size();
    }
    Map<Long,List<Integer>> scoreMap;
    long max;
    private int calculateScore(Map<Integer,List<Integer>> map,int cur,int n){
        long score = 1;
        if(!map.containsKey(cur)){
            score = n-1;
            scoreMap.putIfAbsent(score,new ArrayList<>());
            scoreMap.get(score).add(cur);
            max = Math.max(score,max);
            return 1;
        }
        int left = 0,right = 0;
        List<Integer> list = map.get(cur);
        left = calculateScore(map,list.get(0),n);
        if(list.size()>1){
            right = calculateScore(map,list.get(1),n);
        }
        score = n-left-right-1==0?1:n-left-right-1;
        if(left>0){
            score *= left;
        }
        if(right>0){
            score *= right;
        }
        scoreMap.putIfAbsent(score,new ArrayList<>());
        scoreMap.get(score).add(cur);
        max = Math.max(max,score);
        return left+right+1;
    }
}