/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    /*-->   
     1->2->3->7->6->5->4
              ^
                       ^
     1 2 3
     7 6 5 4
     1 7 2 6 
                      
    */
    public void reorderList(ListNode head) {
        ListNode slow = head;//head of the second half
        ListNode fast = head;//tail of the second half
        ListNode prev = null;//tail of the first half
        if(head==null||head.next==null) return;
        while(fast!=null&&fast.next!=null){
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        reverse(slow,prev);
        slow = head;
        fast = prev.next;

        while(slow!=prev){
            prev.next = fast.next;
            fast.next = slow.next;
            slow.next = fast;
            slow = fast.next;
            fast = prev.next;
        } 
    }
    private ListNode reverse(ListNode head,ListNode prev){
        ListNode curr = head;
        while(curr!=null&&curr.next!=null){
            ListNode next = curr.next;
            curr.next = next.next;
            next.next = prev.next;
            prev.next = next;
        }
        return prev;
    }
    
}