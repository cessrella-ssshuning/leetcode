class Solution {
     public int[] getOrder(int[][] tasks) {
        int n = tasks.length;
        int[][] combi = new int[n][3];
        for(int i = 0;i<n;i++){
            combi[i][0] = tasks[i][0];
            combi[i][1] = tasks[i][1];
            combi[i][2] = i;
        }
        Arrays.sort(combi,(a,b) -> a[0]-b[0]);
        int[] res = new int[n];
        PriorityQueue<int[]> queue = new PriorityQueue<>((a,b) -> a[1] == b[1]?a[0]-b[0]:a[1]-b[1]);//available tasks
        int t = 0;
        int idx = 0;
        for(int i = 0;i<n;i++){
            //cpu choose which task to do
            while(t<combi[i][0]&&!queue.isEmpty()){

                res[idx++] = queue.peek()[0];
                t += queue.peek()[1];
                queue.poll();
            }
            t = Math.max(t,combi[i][0]);
            queue.offer(new int[]{combi[i][2],combi[i][1]});//i is its original index not the sorted index
        }
        while(!queue.isEmpty()){
            res[idx++] = queue.peek()[0];
            queue.poll();
        }

        return res;
    
        
    }
}