class Solution {
    /*
    
    */
    public int minimumEffortPath(int[][] heights) {
        Queue<int[]> pq = new PriorityQueue<>((a,b)->a[2]-b[2]);
        pq.offer(new int[]{0,0,0});
        int m = heights.length;
        int n = heights[0].length;
      
        int[][] dirs = new int[][]{{1,0},{0,1},{0,-1},{-1,0}};
        int[][] dist = new int[m][n];
        for(int i = 0;i<m;i++){
            Arrays.fill(dist[i],Integer.MAX_VALUE);
        }
        int res = Integer.MAX_VALUE;
        while(!pq.isEmpty()){
            int[] point = pq.poll();
            int x = point[0];
            int y = point[1];
            int diff = point[2];
            int val = heights[x][y];
            if(diff>dist[x][y]) continue;
            if(x==m-1&&y==n-1) return diff;
            for(int[] dir:dirs){
                int i = dir[0]+x;
                int j = dir[1]+y;
                if(i<0||i>=m||j<0||j>=n) continue;
                int d = Math.max(diff,Math.abs(val-heights[i][j]));//diff此时不更新，不然没办法比较
                if(d<dist[i][j]){
                    dist[i][j] = d;
                    pq.offer(new int[]{i,j,d});
                }
            }
        }
        return res;
    }
}