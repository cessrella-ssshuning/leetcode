class Solution {
    /*
    when buying, smallest sell order
    when selling,largest buy oder
    sellQueue{}
    order[1] = 3
    15<
    buyQueue{(7,100)}
    */
    public int getNumberOfBacklogOrders(int[][] orders) {
        PriorityQueue<int[]> buy = new PriorityQueue<>((a,b)->b[0]-a[0]);
        PriorityQueue<int[]> sell = new PriorityQueue<>((a,b)->a[0]-b[0]);
        for(int i = 0;i<orders.length;i++){
             int[] o = orders[i];
             if(o[2]==0){
                while(!sell.isEmpty()&&o[1]>0&&o[0]>=sell.peek()[0]&&sell.peek()[1]>=0){
                    int min = Math.min(o[1],sell.peek()[1]);
                    sell.peek()[1] -= min;
                    o[1] -= min;
                    if(sell.peek()[1]==0) sell.poll();
                }
             
                //System.out.println(order[1]);
                if(o[1]>0){
                    buy.offer(o);
                }
            }else{
                while(!buy.isEmpty()&&o[1]>0&&o[0]<=buy.peek()[0]&&buy.peek()[1]>=0){
                    int min = Math.min(o[1],buy.peek()[1]);
                    buy.peek()[1] -= min;
                    o[1] -= min;
                    if(buy.peek()[1]==0) buy.poll();
                }
               
                if(o[1]>0){
                    sell.offer(o);
                }
            }
          
        }
        long res = 0l;
        int M = 1000000007;
        while(!buy.isEmpty()){
            res += buy.poll()[1];
        }
        while(!sell.isEmpty()){
            res += sell.poll()[1];
        }
        return (int)(res%M);     
    }
}