class Solution {
    /*
    DEF
    AD
    C
    ---
    VDQ
    */
    int[] visited;
    int[] map;
    public boolean isSolvable(String[] words, String result) {
        String tmpRes = new StringBuilder(result).reverse().toString();
        visited = new int[10];
        map = new int[128];
        Arrays.fill(map,-1);
        String[] newWords = new String[words.length];
        for(int i = 0;i<words.length;i++){
            if(words[i].length()>result.length()) return false;
            String tmpWord = new StringBuilder(words[i]).reverse().toString();
            newWords[i] = tmpWord;
        }
        return dfs(newWords,tmpRes,0,0,0);
    }
    private boolean dfs(String[] words,String result,int i, int j, int sum){
        //move to the boundary of the string
        if(j==result.length()){
            if(sum!=0) return false;
            if(result.length()>1&&map[result.charAt(result.length()-1)]==0) return false;
            return true;
        }
        //this character has been matched
        if(i==words.length){
            char res = result.charAt(j);
            if(map[res]!=-1){
                if(map[res]==sum%10) return dfs(words,result,0,j+1,sum/10);
                else return false;
            }else{//this part is the same as the below part for backtracking
                if(visited[sum%10]!=0) return false;
                map[res] = sum%10;
                visited[sum%10] = 1;
                if(dfs(words,result,0,j+1,sum/10)) return true;
                map[res] = -1;
                visited[sum%10] = 0;
                return false;
            }
        }
        if(j>=words[i].length()){
            return dfs(words,result,i+1,j,sum);
        }
        char ch = words[i].charAt(j);
        if(map[ch]!=-1){
            if(j==words[i].length()-1&&map[ch]==0&&words[i].length()>1) return false;
            return dfs(words,result,i+1,j,sum+map[ch]);
        }else{
            for(int num = 0;num<=9;num++){
                if(visited[num]!=0) continue;
                if(num==0&&j==words[i].length()-1&&words[i].length()>1) continue;
                visited[num] = 1;
                map[ch] = num;
                if(dfs(words,result,i+1,j,sum+num)) return true;
                visited[num] = 0;
                map[ch] = -1;      
            }
            return false;
        }
    }
}