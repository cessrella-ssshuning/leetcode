class Solution {
    /*
    [3,6,9,1 2 7]
       3 6 -2 -1 4
    */
    public int maximumGap(int[] nums) {
        if(nums.length<=1) return 0;
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        for(int num:nums){
            min = Math.min(min,num);
            max = Math.max(max,num);
        }
        int gap = (int)Math.ceil((double)(max-min)/(nums.length-1));
      //  System.out.println(gap);
        int[] mins = new int[nums.length-1];
        int[] maxs = new int[nums.length-1];
        Arrays.fill(mins,Integer.MAX_VALUE);
        Arrays.fill(maxs,Integer.MIN_VALUE);
        for(int i = 0;i<nums.length;i++){
            if(nums[i]==min||nums[i]==max) continue;
            int idx = (nums[i]-min)/gap;
            mins[idx] = Math.min(nums[i],mins[idx]);
            maxs[idx] = Math.max(nums[i],maxs[idx]);
        }
        int pre = min;
        int maxGap = Integer.MIN_VALUE;
        for(int i = 0;i<nums.length-1;i++){
            //this means the bucket is empty
            if(mins[i]==Integer.MAX_VALUE&&maxs[i]==Integer.MIN_VALUE){
                continue;
            }
            maxGap = Math.max(maxGap,mins[i]-pre);
            pre = maxs[i];
        }
        maxGap = Math.max(maxGap,max-pre);
        return maxGap;
    }
}