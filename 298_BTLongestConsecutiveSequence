/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
  start from parent to child
  1 - null
    - 3 - null
        - 4 - null
            - 5 - null
                - null 
            1+0
            
       
 */
class Solution {
    int max;
    public int longestConsecutive(TreeNode root) {
        max = 0;
        helper(root);
        return max;
    }
    private int helper(TreeNode root){
        if(root==null) return 0;
        int len = 0;
        int left = helper(root.left)+1;
        int right = helper(root.right)+1;
        if(root.left!=null&&root.left.val-root.val!=1){
            left=1;
        }
        if(root.right!=null&&root.right.val-root.val!=1){
            right=1;
        }
        len = Math.max(left,right);
        max = Math.max(len,max);
        return len;
    }
}