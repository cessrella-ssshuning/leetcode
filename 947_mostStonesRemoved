class Solution {
    // X X
    // X   X
    //   X X
    // 0 (0,1)
    // 1 (0,)
    public int removeStones(int[][] stones) {
        
        if(stones.length==0||stones.length==1) return 0;
        UnionFind uf = new UnionFind(stones.length);
        for(int i = 0;i<stones.length-1;i++){
            for(int j = i+1;j<stones.length;j++){
                if(stones[i][0]==stones[j][0]||stones[i][1]==stones[j][1]){
                    uf.union(i,j);
                }
            }
        }
        return stones.length-uf.count;
    }
}
class UnionFind{
    int count;
    int[] parents;
    public UnionFind(int n){
        parents = new int[n];
        for(int i = 0;i<n;i++){
            parents[i] = i;
        }
        count = n;
    }
    private boolean find(int i,int j){
        return findParent(i)==findParent(j);
    }
    private int findParent(int i){
        while(parents[i]!=i){
            parents[i] = parents[parents[i]];
            i = parents[i];
        }
        return parents[i];
    }
    public void union(int i,int j){
        int parentI = findParent(i);
        int parentJ = findParent(j);
        if(parentI!=parentJ){
            parents[parentI] = parentJ;
            count--;
        }
    }
}