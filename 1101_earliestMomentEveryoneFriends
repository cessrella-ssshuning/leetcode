class Solution {
    /*
    [0,5,3]
    [1,1,7] 
    [2,3,2]
    [3,0,2]
    [5,4,2]
    [6,4,0]
    [7,4,3]
    [8,6,7]
    [9,0,6]
    [10,4,6]
     5 - 3 - 2 - 0 - 4
     1 - 7 - 6
     
    */
    public int earliestAcq(int[][] logs, int n) {
        Arrays.sort(logs,(a,b)->a[0]-b[0]);

        UnionFind uf = new UnionFind(n);
        for(int[] log:logs){
            uf.union(log[1],log[2]);
            if(uf.count==1) return log[0];
        }
        return -1;
    }
}

class UnionFind{
    int[] root;
    int count;
    public UnionFind(int n){
        root = new int[n];
        for(int i = 0;i<n;i++){
            root[i] = i;
        }
        count = n;
    }
    public void union(int x,int y){
        int rootX = find(x);
        int rootY = find(y);
        if(rootX!=rootY){ 
            root[rootY] = rootX;
            count--;
        }
    }
    private int find(int x){
        while(root[x]!=x){
            x = root[x];
        }
        return root[x];
    }
    public boolean connected(int x,int y){
        return find(x)==find(y);
    }
}