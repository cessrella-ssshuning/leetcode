class Solution {
    /*
    [[1,4],[2,4],[3,6],[4,4]]
    
    [2,3,4,5]
    */
    public int[] minInterval(int[][] intervals, int[] queries) {
        int n = queries.length;
        int[] res = new int[n];
        Arrays.fill(res,-1);
        Queue<int[]> pq = new PriorityQueue<>((a,b)->a[0]-b[0]);//(duration,right)
        int[][] queryPair = new int[n][2];
        for(int i = 0;i<n;i++){
            queryPair[i][0] = queries[i];
            queryPair[i][1] = i;
        }
        //queries 排序之后可以保证不满足小一点的数的区间也不满足后面大一点的数
        Arrays.sort(queryPair,(a,b)->a[0]-b[0]);
        Arrays.sort(intervals,(a,b)->a[0]-b[0]);
        int j = 0;
        for(int i = 0;i<n;i++){

            while(j<intervals.length&&intervals[j][0]<=queryPair[i][0]){
                pq.offer(new int[]{intervals[j][1]-intervals[j][0]+1,intervals[j][1]});
                j++;
            }
            while(!pq.isEmpty()&&pq.peek()[1]<queryPair[i][0]){
                pq.poll();
            }
            if(!pq.isEmpty())
                res[queryPair[i][1]]=pq.peek()[0];
        }
        return res;
    }
}