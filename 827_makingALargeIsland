class Solution {
    /*
    [1,0]
    [0,1]
    
    [1,1]
    [1,0]
    
    [0,1]
    [1,1]
    */
    public int largestIsland(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        UnionFind uf = new UnionFind(m*n);
        int[][] dirs = new int[][]{{1,0},{-1,0},{0,1},{0,-1}};
        int count = 0;
        for(int i = 0;i<m;i++){
            for(int j = 0;j<n;j++){
                if(grid[i][j] ==1){
                    int a = i*n+j;
                    for(int[] dir:dirs){
                        int x = dir[0]+i;
                        int y = dir[1]+j;
                        if(x<0||x>=m||y>=n||y<0||grid[x][y]==0) continue;
                        int b = x*n+y;
                        uf.union(a,b);
                    }
                    count++;
                }else{
                    count--;
                }
            }
        }
        if(count==m*n) return count;
        if(count==-m*n) return 1;
        int maxSize = 0;
        for(int i = 0;i<m;i++){
            for(int j = 0;j<n;j++){
                if(grid[i][j]==0){
                    int a = i*n+j;
                    //use set to store the parents grid of surrounding islands 
                    Set<Integer> set = new HashSet<>();
                    for(int[] dir:dirs){
                        int x = dir[0]+i;
                        int y = dir[1]+j;
                        if(x<0||x>=m||y>=n||y<0||grid[x][y]==0) continue;
                        int b = x*n+y; 
                     //   System.out.print("b:"+b+",p:"+uf.find(b)+"/");
                        set.add(uf.find(b));
                    }
                   // System.out.println();
                    int size = 1;
                    //calculate area of each island
                    for(int p:set){
                        size += uf.size[p];
                     //   System.out.print(uf.size[p]+",");
                    }
                  //  System.out.println();
                    maxSize = Math.max(maxSize,size);
                }
            }
        }
        return maxSize;
    }
}
class UnionFind{
    int[] p;
    int[] size;
    public UnionFind(int n){
        p = new int[n];
        size = new int[n];
        for(int i = 0;i<n;i++){
            p[i] = i;
            size[i] = 1;
        }
    }
    public void union(int x,int y){
        int xP = find(x);
        int yP = find(y);
        if(xP!=yP){
            //pay attention to size udpate
            if(size[xP]>size[yP]){
                p[yP] = xP;
                size[xP] += size[yP];
            }else{
                p[xP] = yP;
                size[yP] += size[xP];
            }         
        }
    }
    public int find(int x){
        while(p[x]!=x){
            x = p[x];
        }
        return p[x];
    }
}