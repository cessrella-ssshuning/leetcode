class Solution { 
    int n;
    public int regionsBySlashes(String[] grid) {
        n = grid.length;
        UnionFind uf = new UnionFind(n);
        
        for(int i = 0;i<grid.length;i++){
            for(int j = 0;j<grid[i].length();j++){
                if(grid[i].charAt(j)==' ') continue;
                if(grid[i].charAt(j)=='/'){
                    if(uf.find(i*(n+1)+j+1,(i+1)*(n+1)+j)){
                        uf.count++;
                    }else{
                        uf.union(i*(n+1)+j+1,(i+1)*(n+1)+j);
                    }
                }
                if(grid[i].charAt(j)=='\\'){
                        
                    if(uf.find(i*(n+1)+j,(i+1)*(n+1)+j+1)){
                        uf.count++;
                    }else{
                        uf.union(i*(n+1)+j,(i+1)*(n+1)+j+1);
                    }
                }
            }
        }
        return uf.count;
        
    }
 
}
class UnionFind {
    int[] parents;
    int count;
    public UnionFind(int N){    
        parents = new int[(N+1)*(N+1)];
        for(int i = 0;i<=N;i++){
            for(int j = 0;j<=N;j++){
                int index = i*(N+1)+j;
                parents[index] = index;
                if(i==0||i==N||j==0||j==N) parents[index] = 0;
            }
        }
        count = 1;
    }
    
    public void union(int x,int y){
        x = findRoot(x); y = findRoot(y);
        if (x != y) {
            parents[x] = y;
        }
    }
    public boolean find(int i,int j){
        return findRoot(i)==findRoot(j);
    }
    private int findRoot(int x){
        if (x != parents[x]) {
            parents[x] = findRoot(parents[x]);
        }
        return parents[x];
    }
    
}