class Solution {
    int count;
    public int closedIsland(int[][] grid) {
        count = 0;
        int m = grid.length;
        int n = grid[0].length;
        for(int i = 0;i<m;i++){
            if(grid[i][0]==0) dfs(i,0,grid);
            if(grid[i][n-1]==0) fill(i,n-1,grid);
        }
        for(int i = 0;i<n;i++){
            if(grid[0][i]==0) fill(0,i,grid);
            if(grid[m-1][i]==0) fill(m-1,i,grid);
        }
        for(int i = 0;i<m;i++){
            for(int j = 0;j<n;j++){
                if(grid[i][j]==0){
                    dfs(i,j,grid);
                    count++;
                }
            }
        }
        return count;
    }
    int[][] dirs = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
    private void fill(int i,int j,int[][] grid){
        grid[i][j] = 1;
        for(int[] dir:dirs){
            int x = dir[0]+i;
            int y = dir[1]+j;
            if(x<0||x>=grid.length||y<0||y>=grid[x].length) continue;
            if(grid[x][y]==0){
                fill(x,y,grid);
            }
        }
    }
    private void dfs(int i,int j,int[][] grid){
        grid[i][j]=1;
        for(int[] dir:dirs){
            int x = dir[0]+i;
            int y = dir[1]+j;
            if(x<0||x>=grid.length||y<0||y>=grid[x].length) continue;
            if(grid[x][y]==0){
                dfs(x,y,grid);
            }
        }
    }
}