class Solution {    
    public int minJumps(int[] arr) {
        if(arr.length==1) return 0;
        boolean[] visited = new boolean[arr.length];
        int step = 0;
        Map<Integer,List<Integer>> map = new HashMap<>();
        for(int i = 0;i<arr.length;i++){
            List<Integer> list= map.getOrDefault(arr[i],new ArrayList<>());
            list.add(i);
            map.put(arr[i],list);
        }
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(0);
        while(!queue.isEmpty()){
            int size= queue.size();
            for(int i = 0;i<size;i++){
                int idx = queue.poll();
                if(idx==arr.length-1) return step;
                visited[idx] = true;
                if(idx+1<arr.length&&!visited[idx+1]){
                    queue.offer(idx+1);
                    visited[idx+1] = true;
                }
                if(idx-1>=0&&!visited[idx-1]){
                    queue.offer(idx-1);
                    visited[idx-1] = true;
                }
                if(map.containsKey(arr[idx]))
                    for(int j:map.get(arr[idx])){
                        if(!visited[j]){
                            visited[j] = true;
                            queue.offer(j);
                        }
                    }
                map.remove(arr[idx]);
            }
            step++;
            
        }
        return -1;
    }
}