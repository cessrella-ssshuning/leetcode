class Solution {
    /*
    [1,  3]
               [6,  9]
       [2,  5]
     1  1 -1  -1 1 -1
        ^
    interval [6,9]
    sum 1
    [1,5]
    */
    public int[][] insert(int[][] intervals, int[] newInterval) {
        int[][] intervals2 = new int[(intervals.length+1)*2][2];
        int k = 0;
        for(int[] interval:intervals){
            intervals2[k][0] = interval[0];
            intervals2[k++][1] = 1;
            intervals2[k][0] = interval[1];
            intervals2[k++][1] = -1;
        }
        intervals2[k][0] = newInterval[0];
        intervals2[k++][1] = 1;
        intervals2[k][0] = newInterval[1];
        intervals2[k][1] = -1;
        Arrays.sort(intervals2,(a,b)->a[0]-b[0]==0?b[1]-a[1]:a[0]-b[0]);
        for(int[] interval:intervals2){
          //  System.out.println(interval[0]+","+interval[1]);
        }
        List<int[]> res = new ArrayList<>();
        int sum = 0;
        int[] interval = new int[2];
        for(int i = 0;i<intervals2.length;i++){
         //   System.out.println(intervals2[i][0]+","+intervals2[i][1]);
            if(sum==0&&intervals2[i][1]>0){
                interval = new int[2];
                interval[0] = intervals2[i][0]; 
            }else if(sum>0&&sum+intervals2[i][1]==0){
                interval[1] = intervals2[i][0];
                res.add(interval);
                interval = null;
            }
            sum += intervals2[i][1];//sum will be updated no matter it meets the requirement or not
        }
        int[][] resArr = new int[res.size()][2];
        for(int i = 0;i<res.size();i++){
            resArr[i] = res.get(i);
        }
        return resArr;
    }
}