class Solution {
    public boolean validPath(int n, int[][] edges, int start, int end) {
        if(start==end) return true;
        Map<Integer,List<Integer>> graph = new HashMap<>();
        for(int[] edge:edges){
            graph.putIfAbsent(edge[0],new ArrayList<>());
            graph.get(edge[0]).add(edge[1]);
            graph.putIfAbsent(edge[1],new ArrayList<>());
            graph.get(edge[1]).add(edge[0]);
        }
        if(!graph.containsKey(start)) return false;
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(start);
        Set<Integer> visited = new HashSet<>();
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0;i<size;i++){
                int node = queue.poll();
                if(node==end) return true;
                if(!visited.contains(node)&&graph.containsKey(node)){
                    visited.add(node);
                    List<Integer> list = graph.get(node);
                    for(int j = 0;j<list.size();j++){
                        queue.offer(list.get(j));
                    }
                }
            }
        }
        return false;
    }
}
class Solution {
    Set<Integer> visited;
    public boolean validPath(int n, int[][] edges, int start, int end) {
        if(start==end) return true;
        Map<Integer,List<Integer>> graph = new HashMap<>();
        for(int[] edge:edges){
            graph.putIfAbsent(edge[0],new ArrayList<>());
            graph.get(edge[0]).add(edge[1]);
            graph.putIfAbsent(edge[1],new ArrayList<>());
            graph.get(edge[1]).add(edge[0]);
        }
        visited = new HashSet<>();
        return dfs(graph,start,end);
    }
    private boolean dfs(Map<Integer,List<Integer>> graph,int start,int end){
        if(start==end) return true;
        if(graph.containsKey(start)&&!visited.contains(start)){
            visited.add(start);
            List<Integer> list = graph.get(start);
            for(int i = 0;i<list.size();i++){
                if(dfs(graph,list.get(i),end)) return true;
            }
        }
        return false;
    }
}