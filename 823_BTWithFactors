class Solution {
    /*
    [2,4,8,5,10,20]
         ^
     2,4,5,10   4*1  ---- level 0
     4 22 - +1  1*1
     10 5 2 +1  1*2*1*1
     10 2 5 +1     ----- level 2
     20 2 10   1*2*2*1*1
     20 10 2       ----- level 3
     
     res[][][1][][2][1][][][][][1]...[1]
     res[largestnum*largestnum+1]
     map{(2,1)(4,2)(8,1+2+2)(5,1)(10,3)}
    */
    public int numFactoredBinaryTrees(int[] arr) {
        Map<Integer,Long> map = new HashMap<>();
        Arrays.sort(arr);
        int mod = 1000000007;
        long count;
        for(int i = 0;i<arr.length;i++){
            count = 1;
            for(Integer key:map.keySet()){
                if(arr[i]%key==0&&map.containsKey(arr[i]/key)){
                    count += map.get(key)*map.get(arr[i]/key);
                }
            }
            map.put(arr[i],count);
        }
        long res = 0l;
        for(Map.Entry<Integer,Long> entry:map.entrySet()){
            res = (res+entry.getValue())%mod;
        }
        return (int)(res%mod);
    }
}