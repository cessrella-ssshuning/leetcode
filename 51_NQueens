class Solution {
    List<List<String>> res;
    public List<List<String>> solveNQueens(int n) {
        res = new ArrayList<>();
        char[][] board = new char[n][n];
        for(int i = 0;i<n;i++){
            Arrays.fill(board[i],'.');
        }
        dfs(0,board);
        return res;
    }
    private void dfs(int i,char[][] board){
        if(i==board.length){
            List<String> list = new ArrayList<>();
            for(int m = 0;m<board.length;m++){
                String s = new String(board[m]);
                list.add(s);
            }
            res.add(list);
            return;
        }
        for(int j = 0;j<board[i].length;j++){
            if(isValid(i,j,board)){
                board[i][j] = 'Q';
                dfs(i+1,board);
                board[i][j] = '.'; 
            } 
            
        }
    }
    private boolean isValid(int row,int col,char[][] board){
        for(int i = 0;i<board.length;i++){
            if(board[i][col]=='Q') return false;
        }
        for(int i = 0;i<board[0].length;i++){
            if(board[row][i]=='Q') return false;
        }
        int k = 1;//for diagonal grids
        while(row-k>=0&&col-k>=0){
            if(board[row-k][col-k]=='Q') return false;
            k++;
        }
        k = 1;
        while(row-k>=0&&col+k<board[0].length){
            if(board[row-k][col+k]=='Q') return false;
            k++;
        }
        return true;
    }
}