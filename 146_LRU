class LRUCache {
    class Node{
        int val;
        int key;
        Node pre;
        Node next;
        public Node(int key,int val){
            this.val = val;
            this.key = key;
        }
        public Node(){
            this.key = 0;
            this.val = 0;
        }
    }
    Map<Integer,Node> map;
    int cap;
    Node head;
    Node tail;
     
    public LRUCache(int capacity) {
        map = new HashMap<>();
        this.cap = capacity;
        head = new Node();
        tail = new Node();
        head.next = tail;
        tail.pre = head;
    }
    /*
     Node1 Node2 Node3
       ^     ^     ^
     
    */
    public int get(int key) {
        if(!map.containsKey(key)) return -1;
        update(map.get(key));
        return map.get(key).val;
    }
    
    private void update(Node node){
        remove(node);
        add(node);
    }
    private void remove(Node node){
        Node pre = node.pre;
        pre.next = node.next;
        node.next.pre = pre;
    }
    private void add(Node node){//add behind head
        Node next = head.next;
        head.next = node;
        node.next = next;
        node.pre = head;
        next.pre = node; 
    }
       
    public void put(int key, int value) {
        if(map.containsKey(key)){
            Node node = map.get(key);
            node.val = value;
            map.put(key,node);
            update(node);
        }else{
            Node node = new Node(key,value);
            map.put(key,node);
            add(node);
            if(map.size()>cap){
                Node pre = tail.pre;
                remove(pre);
                map.remove(pre.key);
            }
        }
    }
}