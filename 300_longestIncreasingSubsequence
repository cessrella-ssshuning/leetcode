class Solution {
    /*
      [0,1,0,3,2,3]
             ^
      along the way of iterating through this array
      length of increasing subsequence ending with current element
       res 3
       maxIdx 1
       
      record max along the iteration
    */
    public int lengthOfLIS(int[] nums) {
        int[] dp = new int[nums.length];
        Arrays.fill(dp,1);
        int res = 1;
        for(int i = 1;i<nums.length;i++){
            for(int j = 0;j<i;j++){
                if(nums[j]<nums[i]){
                    dp[i] = Math.max(dp[i],dp[j]+1);
                    
                }
            }  
            res = Math.max(res,dp[i]);
        }
        return res;
       
    }
}
class Solution {
    /*
      [10,9,2,5,3,7,101,18,7]
                           ^
       2,3,7,18,
    i 2
    j 2
    m 1
    size 4
    find the first >=element to replace
    */
    public int lengthOfLIS(int[] nums) {
        int[] tails = new int[nums.length];
        int size = 0;
        int i = 0;
        int j = 0;
        for(int x:nums){
            i = 0;
            j = size;
            while(i<j){
                int mid = i+(j-i)/2;
                if(tails[mid]<x){
                    i = mid+1;
                }else{
                    j = mid;
                }
            }
            tails[i] = x;
            if(i==size) size++;
        }
        return size;
    }
    
}