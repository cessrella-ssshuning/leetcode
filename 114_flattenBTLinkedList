/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
    node -> node.left subtree -> node.right subtree
    node.left = null
    node.right = leftsubstree
        1
     2     5
  3    4      6
       helper(5) -> helper(6) 
         5->6    
       helper(2) -> 4 -> null
                 -> 3 -> null
             2->3
 */
class Solution {
    public void flatten(TreeNode root) {
        if(root==null) return;
        helper(root);
    }
    private TreeNode helper(TreeNode node){
        if(node==null) return null;
        TreeNode right = helper(node.right);
        TreeNode left = helper(node.left);
        if(left!=null){
            node.right = left;
            while(left.right!=null){
                left = left.right;
            }
            left.right = right;
        }else{
            node.right = right;
        }
        node.left = null;
        return node;
    }
 
}