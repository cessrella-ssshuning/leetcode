class Solution {
    // 0 1
    // 1 0
    public int shortestBridge(int[][] grid) {
        int[][] visited = new int[grid.length][grid[0].length];
        boolean found = false;
        for(int i = 0;i<grid.length;i++){
            if(found) break;
            for(int j = 0;j<grid[0].length;j++){
                if(grid[i][j]==1){
                    dfs(i,j,grid,visited);//add all elements in the first island to queue
                    found = true;
                    break;
                }
            }
        }
        int res = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0;i<size;i++){
                int[] pair = queue.poll();
              //  System.out.println(pair[0]+","+pair[1]);
                for(int[] dir:dirs){
                    int x = dir[0]+pair[0];
                    int y = dir[1]+pair[1];
                    if(x<0||x>=grid.length||y<0||y>=grid[x].length||visited[x][y]==1) continue;
                    visited[x][y]=1;
                    if(grid[x][y]==1) return res;
                    queue.offer(new int[]{x,y});
                }
            }
            res++;
        }
        return -1;     
        
    }
    Queue<int[]> queue = new LinkedList<>();
    int[][] dirs = new int[][]{{1,0},{-1,0},{0,1},{0,-1}};
    private void dfs(int i, int j,int[][] grid,int[][] visited){
        if(i<0||i>=grid.length||j<0||j>=grid[0].length||grid[i][j]==0||visited[i][j]==1) return;
        visited[i][j] = 1;
        queue.offer(new int[]{i,j});
        for(int[] dir:dirs){
            int x = dir[0]+i;
            int y = dir[1]+j;
            dfs(x,y,grid,visited);
        }
    }
}