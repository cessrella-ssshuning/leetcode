/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 3->2->0->4->2
    ^
          ^
2.1) L1 is defined as the distance between the head point and entry point
2.2) L2 is defined as the distance between the entry point and the meeting point
Distance traveled by slow when they meet: L1+L2
Distance traveled by fast when they meet: L1+L2+x+L2, where x is the remaining length of the cycle (meeting point to start of the cycle).

2(L1+L2) = L1+L2+x+L2
2L1 + 2L2 = L1+2L2+x
=> x = L1

so we need to move L1 steps from the current meeting point to reach the entry point of the cycle.
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head==null||head.next==null) return null;
        ListNode l1 = head;
        ListNode l2 = head;
        while(l1!=null&&l2!=null&&l2.next!=null){
            l1 = l1.next;
            l2 = l2.next.next;
            if(l1==l2) break;
        }
        l1 = head;
        while(l1!=l2&&l1!=null&&l2!=null){
            l1 = l1.next;
            l2 = l2.next;
        }
        if(l1==l2) return l1;
        else return null;
    }
}