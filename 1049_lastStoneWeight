class Solution {
    /*
     2,7,4,1,8,1
     2-7 -5
    */
    public int lastStoneWeightII(int[] stones) {
        int sum = 0;
        for(int i = 0;i<stones.length;i++){
            sum += stones[i];
        }
        boolean[] dp = new boolean[sum+1];
        dp[0] = true;
        int toRemove = 0;
        for(int i = 0;i<stones.length;i++){
            boolean[] cur = dp.clone();
            for(int j = stones[i];j<=sum/2;j++){
                if(dp[j-stones[i]]){
                    cur[j] = true;
                    toRemove = Math.max(toRemove,j);
                }
            }
            dp = cur;
        }
        return sum-toRemove*2;
    }
}
class Solution {
    /*
     2,7,4,1,8,1
     2-7 -5
    */
    public int lastStoneWeightII(int[] stones) {
        Map<Integer,Integer> map = new HashMap<>();
        map.put(0,1);
        for(int stone:stones){
            Map<Integer,Integer> dp = new HashMap<>();
            for(Integer i:map.keySet()){
                int key1 = i+stone;
                dp.put(key1,dp.getOrDefault(key1,0)+map.get(i));
                int key2 = i-stone;
                dp.put(key2,dp.getOrDefault(key2,0)+map.get(i));
            }
            map = dp;
        }
        int min = Integer.MAX_VALUE;
        for(Integer i:map.keySet()){
            if(i>=0&&min>i){
                min = i;
            }
        }
        return min;
    }
}