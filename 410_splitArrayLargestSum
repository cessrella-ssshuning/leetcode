class Solution {
    /*
    [7,2,5,10,8]
     0 1 2
         ^
     i   3 count
     i-1 2
     XXX XXXY
     
    */
    public int splitArray(int[] nums, int m) {
        int n = nums.length;
        int[][] dp = new int[n+1][m+1];
        for(int i = 1;i<=nums.length;i++){
            dp[i][1] = dp[i-1][1]+nums[i-1];
        }
        for(int i = 1;i<=n;i++){
            for(int k = 2;k<=Math.min(m,i);k++){
                dp[i][k] = Math.max(dp[i-1][k-1],nums[i-1]);
                for(int j = 1;j<=i-1;j++){
                    int max = Math.max(dp[j][k-1],dp[i][1]-dp[j][1]);
                    dp[i][k] = Math.min(dp[i][k],max);
                }
            }
            
        }
        return dp[n][m];
    }
}
class Solution {
    /*
    [7,2,5,10,8]
     7/ 2,5,10,8 ->25 -> 2/5,10,8 -> 5/10,8 -> 10/8
        ^
     7,2/5,10,8  ->23 -> 
     7,2,5/10,8  ->18
     7,2,5,10/8  ->8
    */
    int min;
    int[][] mem ;
    public int splitArray(int[] nums, int m) {
        int n = nums.length;
        int[] presum = new int[n];
        mem = new int[n][m+1];
        for(int[] arr:mem){
            Arrays.fill(arr,Integer.MAX_VALUE);
        }
        presum[0] = nums[0];
        for(int i= 1;i<n;i++){
            presum[i] = presum[i-1]+nums[i];
        }
        return dfs(nums,n-1,m,presum);
    }
    private int dfs(int[] nums,int k,int m,int[] presum){
        if(m==1) return presum[k];
        if(m>k+1) return Integer.MAX_VALUE;
        if(mem[k][m]!=Integer.MAX_VALUE) return mem[k][m];
        int ans = Integer.MAX_VALUE;
        for(int i = 0;i<k;i++){
            ans = Math.min(ans,Math.max(dfs(nums,i,m-1,presum),presum[k]-presum[i]));
        }
        mem[k][m] = ans;
        return ans;
    }
}