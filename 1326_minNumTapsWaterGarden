class Solution {
  
    public int minTaps(int n, int[] ranges) {
        int[][] intervals = new int[ranges.length][2];
        for(int i = 0;i<ranges.length;i++){
            intervals[i][0] = i-ranges[i];
            intervals[i][1] = i+ranges[i];
        }
        Arrays.sort(intervals,(a,b)->a[0]-b[0]==0?b[1]-a[1]:a[0]-b[0]);
        // for(int i = 0;i<ranges.length;i++){
        //     System.out.println(intervals[i][0]+","+intervals[i][1]);
        // }
        int i = 0;
        int res = 0;
        int end = 0;
        if(intervals[i][0]>0) return -1;
        while(i<intervals.length){
            res++;
            int newEnd = end;
            while(i<intervals.length&&intervals[i][0]<=end){
                newEnd = Math.max(newEnd,intervals[i][1]);
                i++;
            }
            if(newEnd>=n) return res;
            if(newEnd == end) return -1;//there is a gap between current and following intervals
            //说明更新的都被现在的interval包住了
            end = newEnd;// go to the next interval
        }
        if(end>=n) return res;
        return -1;
    }
}