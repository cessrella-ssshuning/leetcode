class Solution {
    /*
    2  2  2
    2  2  0
    0  1  1
    2
    x 0
    y 1
    */
    public int orangesRotting(int[][] grid) {
        Queue<int[]> queue = new LinkedList<>();
        int n = grid.length;
        int m = grid[0].length;
        for(int i = 0;i<n;i++){
            for(int j = 0;j<m;j++){
                if(grid[i][j]==2){
                    queue.offer(new int[]{i,j});
                }
            }
        }
        int time = -1;
        int[][] dirs = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0;i<size;i++){
                int[] coor = queue.poll();
                int x = coor[0];
                int y = coor[1];
                for(int[] dir:dirs){
                    int p = dir[0]+x;
                    int q = dir[1]+y;
                    if(p<0||p>=n||q<0||q>=m||grid[p][q]==0||grid[p][q]==2) continue;
                    grid[p][q] = 2;
                    queue.offer(new int[]{p,q});
                }
            }
            time++;
        }
        for(int i = 0;i<n;i++){
            for(int j = 0;j<m;j++){
                if(grid[i][j]==1){
                    return -1;
                }
            }
        }
        return time==-1?0:time;
    }
}