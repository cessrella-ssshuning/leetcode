class Solution {
    /*
    0 - (1,2)
    1 - (0,2)
    2 - (0,1)
    0 - 1 - 3  
      0.5 0.6
      - 2 - 4 
      0.2 0.3
    map
    st 0
    end 2
    int[]: int[0] = st int[1] = end int[2] = w
    pq ((a,b)->b-a)
    0.5, 0.2
    */
    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
        double[] probs = new double[n];
        Arrays.fill(probs,0);
        Map<Integer,Map<Integer,Double>> graph = new HashMap<>();
        for(int i = 0;i<edges.length;i++){
            int[] edge = edges[i];
            graph.putIfAbsent(edge[0],new HashMap<>());
            graph.get(edge[0]).put(edge[1],succProb[i]);
            graph.putIfAbsent(edge[1],new HashMap());
            graph.get(edge[1]).put(edge[0],succProb[i]);
        }
	
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>(new Comparator<Pair>(){
            @Override
            public int compare(Pair a,Pair b){
                if(a.p>b.p){
                    return -1;
                }else if(a.p<b.p){
                    return 1;
                }else return 0;
            }
        });
        pq.offer(new Pair(start,1.0));
        probs[start] = 1.0;
        while(!pq.isEmpty()){
            Pair pair = pq.poll();
            int node = pair.n;
            if(node==end) return probs[end];
            if(graph.containsKey(node)){
                for(Map.Entry<Integer,Double> entry:graph.get(node).entrySet()){
                    int dst = entry.getKey();
                    double pVal = entry.getValue();
                    if(pVal*probs[node]>probs[dst]){
                        probs[dst] = pVal*probs[node];
                        pq.offer(new Pair(dst,probs[dst]));
                    }
                }
            }
        }
        return probs[end];
    }
}
class Pair{
    int n;
    double p;
    public Pair(int n,double p){
        this.n = n;
        this.p = p;
    }
}