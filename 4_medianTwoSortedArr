class Solution {
    /*
     X X X  X X X  6
     Y Y Y Y  Y Y Y   7
     2
     1 3
    */
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        if((n+m)%2!=0){
            return findKthElement(nums1,0,nums2,0,(m+n)/2+1);
        }else{
            return (findKthElement(nums1,0,nums2,0,(m+n)/2)+findKthElement(nums1,0,nums2,0,(m+n)/2+1))*1.0/2;
        } 
    }
    private int findKthElement(int[] nums1,int st1,int[] nums2,int st2,int k){
        int n = nums1.length;
        int m = nums2.length;
        if(n-st1>m-st2) return findKthElement(nums2,st2,nums1,st1,k);
        if(st1==n){
            return nums2[st2+k-1];
        }
        if(k==1){
            return Math.min(nums1[st1],nums2[st2]);
        }
        int part1 = 0;
        if(n<=k/2){
            part1 = n;
        }else{
            part1 = k/2;
        }
        int part2 = k-part1;
        if(nums1[st1+part1-1]<nums2[st2+part2-1]){
            return findKthElement(nums1,st1+part1,nums2,st2,k-part1);
        }else{
            return findKthElement(nums1,st1,nums2,st2+part2,k-part2);
        }
    }
}