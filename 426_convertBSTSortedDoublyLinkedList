/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val,Node _left,Node _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
          4
      2       5
   1    3
    cur.left==null
    stack(4,,)
    cur -> cur.right 
    stack.
*/

class Solution {
    public Node treeToDoublyList(Node root) {
        Node node = root;
        Node dummy = new Node(0);
        Node prev = dummy;
        dummy.right =  root;
        if(root==null) return null;
        Stack<Node> stack = new Stack<>();
        while(node!=null||!stack.isEmpty()){
            while(node!=null){
                stack.push(node);
                node = node.left;
            }
            node = stack.pop();
            prev.right = node;
            node.left = prev;
            prev = node;
            node = node.right;
        }
        dummy.right.left = prev;
        prev.right = dummy.right;
        
        return dummy.right;
    }
}