class Solution {
    int res = 0;
    public int maxDepth(TreeNode root) {
        if(root==null) return 0;
        if(root.left==null&&root.right==null) return 1;
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
      //  res = Math.max(res,Math.max(left,right)+1);
        return Math.max(left,right)+1;
    }  
}
class Solution {
    
    public int maxDepth(TreeNode root) {
        if(root==null) return 0;
        if(root.left==null&&root.right==null) return 1;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int res = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0;i<size;i++){
                TreeNode node = queue.poll();
                if(node.left!=null){
                    queue.offer(node.left);
                }
                if(node.right!=null){
                    queue.offer(node.right);
                }
            } 
            res++;
        }
        return res;
    }  
}