/*
// Definition for a QuadTree node.
class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;

    
    public Node() {
        this.val = false;
        this.isLeaf = false;
        this.topLeft = null;
        this.topRight = null;
        this.bottomLeft = null;
        this.bottomRight = null;
    }
    
    public Node(boolean val, boolean isLeaf) {
        this.val = val;
        this.isLeaf = isLeaf;
        this.topLeft = null;
        this.topRight = null;
        this.bottomLeft = null;
        this.bottomRight = null;
    }
    
    public Node(boolean val, boolean isLeaf, Node topLeft, Node topRight, Node bottomLeft, Node bottomRight) {
        this.val = val;
        this.isLeaf = isLeaf;
        this.topLeft = topLeft;
        this.topRight = topRight;
        this.bottomLeft = bottomLeft;
        this.bottomRight = bottomRight;
    }
};
0,1,2,3
(3+0)/2 = 1
*/

class Solution {
    public Node construct(int[][] grid) {
        return construct(grid,0,grid.length-1,0,grid[0].length-1);
    }
    private Node construct(int[][] grid,int up,int down,int left,int right){
        Node node = new Node();
        if(isSame(grid,up,down,left,right)){
            node.isLeaf = true;
            node.val = grid[up][left]==1;
            return node;
        }
        node.isLeaf = false;
        node.topLeft = construct(grid,up,(down+up)/2,left,(left+right)/2);
        node.topRight = construct(grid,up,(down+up)/2,(left+right)/2+1,right);
        node.bottomLeft = construct(grid,(down+up)/2+1,down,left,(left+right)/2);
        node.bottomRight = construct(grid,(down+up)/2+1,down,(left+right)/2+1,right);
        return node;
    }
    private boolean isSame(int[][] grid,int up,int down,int left,int right){
        int val = -1;
        for(int i = up;i<=down;i++){
            for(int j = left;j<=right;j++){
                if(val==-1){
                    val = grid[i][j];
                }else{
                    if(val!=grid[i][j]) return false;
                }
            }
        }
        return true;
    }
}