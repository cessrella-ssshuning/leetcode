class Solution {
    /*
    [2,10,3,1,5,8]
     0  1 2 3 4 5
    [5,4,3,9,7,2]
     0 1 2 3 4 5
    [2,3,4,5,7,9]
     5 2 1 0 4 3
    [8,3,10,2,5,1]
     ^
    */
    public int maxPerformance(int n, int[] speed, int[] efficiency, int k) {
        int[][] persons = new int[n][2];
        for(int i = 0;i<n;i++){//combine the two features first
            persons[i][0] = speed[i];
            persons[i][1] = efficiency[i];
        }
        Arrays.sort(persons,(a,b)->b[1]-a[1]);
        long res = Integer.MIN_VALUE;
        Queue<Integer> queue = new PriorityQueue<>();//queue to store the speed
        long sumSpeed = 0;
        for(int i = 0;i<n;i++){
            if(queue.size()>k-1){
                sumSpeed -= queue.peek();
                queue.poll();
            }
            sumSpeed += persons[i][0];
            queue.offer(persons[i][0]);
            res = Math.max(sumSpeed*persons[i][1],res);
        }
        long M = 1000000007;
        return (int)(res%M);
    }
}