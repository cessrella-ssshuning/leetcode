class Solution {
    public int shortestPath(int[][] grid, int K) {
        int[][] dirs = {{0,1},{0,-1},{-1,0},{1,0}};
        int m = grid.length;
        int n = grid[0].length;
        if(m==1&&n==1) return 0;
        int[][][] visited = new int[m+1][n+1][m*n+1];
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0,0,0});
        int res = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0;i<size;i++){
                int[] coor = queue.poll();
                for(int[] dir:dirs){
                    int x = coor[0]+dir[0];
                    int y = coor[1]+dir[1];
                    int k = coor[2];
                    if(x==m-1&&y==n-1&&k<=K) return res+1;
                    if(x<0||x>=grid.length||y<0||y>=grid[0].length||k>K) continue;
                    if(visited[x][y][k]==1) continue;
                    visited[x][y][k] = 1;
                    if(grid[x][y]==1){
                        queue.offer(new int[]{x,y,k+1});
                    }else{
                        queue.offer(new int[]{x,y,k});
                    }
                }
                
            }
            res++;
        }
        return -1;
    }
}