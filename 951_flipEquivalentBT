/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
        1
    2         3
4     5     6
    7   8
                1
             3         2       
               6     4   5   
                       8   7         
    
                  1
             2        3
           4   5    6
             8   7
      root1 , root2
      if(root1==null&&root2==null) return true
      root1!=root2 return false
      root1.left==root2.right&&root1.right==root2.left
      swap(root1.left,root1.right);
      if(flipEquiv(root1.left,root2.left)&&flipEquiv(root1.right,root2.right)){
        return true;
      }
      return false;
 */
class Solution {
    public boolean flipEquiv(TreeNode root1, TreeNode root2) {    
       if(root1==null&&root2==null) return true;
        if(root1==null&&root2!=null||root2==null&&root1!=null||root1.val!=root2.val) return false;
        if(flipEquiv(root1.right,root2.left)&&flipEquiv(root1.left,root2.right)) return true;
        if(flipEquiv(root1.left,root2.left)&&flipEquiv(root1.right,root2.right)) return true;
        return false;      
    }
}