class Solution {
    public Node connect(Node root) {
        if(root==null) return null;
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        Node prev = null;
        Node cur = null;
        while(!queue.isEmpty()){
            int size = queue.size();
            while(size-->0){
                Node node = queue.poll();
                cur = node;
                if(node!=null){
                    if(prev!=null) prev.next = node;
                    prev = node;
                    if(node.left!=null){
                        queue.offer(node.left);
                    queue.offer(node.right);
                    }
                    
                }  
            }
            cur.next = null;
            prev = null;
        }
        return root;
    }
}
class Solution {
    public Node connect(Node node) {
        if(node==null) return null;
        if(node.left!=null){
            node.left.next = node.right;
        }
        if(node.next!=null&&node.right!=null){
            node.right.next = node.next.left;
        }
        connect(node.left);
        connect(node.right);
        return node;
        
    }
}