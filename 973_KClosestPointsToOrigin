class Solution {
    /*
    top k smallest points
    use heap, maximum heap
    9,8,5,4 k elements in the heap
    when some distance is smaller than the top elements here
    
    */
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->b[1]*b[1]+b[0]*b[0]-a[0]*a[0]-a[1]*a[1]);
        for(int[] p:points){
            pq.offer(p);
            if(pq.size()>k){
                pq.poll();
            }
        }
        int[][] res = new int[k][2];
        for(int i = k-1;i>=0;i--){
            res[i] = pq.poll();
        }
        return res;
    }
}