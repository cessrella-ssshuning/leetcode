class Solution {
    public int balancedString(String s) {
        int[] chars = new int[128];
        int n = s.length();
        for(int i = 0;i<n;i++){
            char c = s.charAt(i);
            chars[c]++;
        }
        boolean flag = true;
        
        char[] chs = {'Q','W','E','R'};
        for(char c: chs){ 
            if(chars[c]!=n/4) { 
                flag = false;
            }
        }
        if(flag) return 0;
        int end = 0;
        int[] windowChs = new int[128];
        int res = Integer.MAX_VALUE;
        //to make the window smallest, so once the chars outside windown
        //meet the requirement, then stop 
        for(int st = 0;st<n;st++){
            
            while(end<n&&!isEnough(windowChs,chars,n)){
                windowChs[s.charAt(end)]++;                
                end++;    
            }
            if(isEnough(windowChs,chars,n)){
                res = Math.min(res,end-st);
            }
            windowChs[s.charAt(st)]--;
        }
        return res;
        
    }
    private boolean isEnough(int[] windowChs,int[] chars,int n){ 
        if(chars['Q']-windowChs['Q']>n/4) return false;
        if(chars['W']-windowChs['W']>n/4) return false;
        if(chars['E']-windowChs['E']>n/4) return false;
        if(chars['R']-windowChs['R']>n/4) return false;
        return true;
    }
}