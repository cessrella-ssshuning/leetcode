class Solution {
    public int countNodes(TreeNode root) {
        TreeNode node = root;
        if(node==null) return 0;
        int h = 0;
        while(node!=null){
            node = node.left;
            h++;
        }
        /*
        1
      2  3
     4
     left   4
     right  7
     m      5
        */
        int left = 1;
        int right = (int)Math.pow(2,h)-1;
        
        while(left+1<right){
            int m = left +(right-left)/2;
            if(hasK(root,m)){
                left = m;
            }else{
                right = m-1;
            }
        }
        
        if(hasK(root,right)) return right;
        else if(hasK(root,left)) return left;
        return 0;
    }
    /*
    7->3->1  
    */
    private boolean hasK(TreeNode root,int k){//here k is index meaning val == position
        List<Integer> list = new ArrayList<>();
        while(k>0){
            list.add(k);
            k = k/2;
        }
       
        for(int i = list.size()-1;i>0;i--){
            
            if(list.get(i-1)==list.get(i)*2){
                root = root.left;
            }else{
                root = root.right;
            }
        }
        if(root==null) return false;
        return true;
    }
}
class Solution {
    public int countNodes(TreeNode root) {
        if(root==null) return 0;
        
        int leftH = getLeftHeight(root);
        int rightH = getRightHeight(root);
        if(leftH==rightH){
            return (int)Math.pow(2,leftH)-1;
        }else{
            return countNodes(root.left)+countNodes(root.right)+1;
        }
        
    }
    private int getLeftHeight(TreeNode node){
        int h = 0;
        while(node!=null){
            node = node.left;
            h++;
        }
        return h;
    }
    private int getRightHeight(TreeNode node){
        int h = 0;
        while(node!=null){
            node = node.right;
            h++;
        }
        return h;
    }
   
}