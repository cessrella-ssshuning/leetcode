 /*
    Quick Find for UnionFind
     */
    private static class UnionFind{
        private int[] root;
        public UnionFind(int n){
            root = new int[n];
            for(int i = 0;i<n;i++){
                root[i] = i;
            }
        }
        private void union(int x,int y){
            int rootX = root[x];
            int rootY = root[y];
            if(rootX!=rootY){
                for(int i = 0;i<root.length;i++){
                    if(root[i]==rootX){
                        root[i] = rootY;
                    }
                }
            }
        }
        private int find(int x){//directly store the root node not just parent node for quick find
            return root[x];
        }
        private boolean connected(int x,int y){
            return find(x)==find(y);
        }
    }


     /*
    Quick Union for UnionFind
     */
    private static class UnionFind{
        private int[] root;
        public UnionFind(int n){
            root = new int[n];
            for(int i = 0;i<n;i++){
                root[i] = i;
            }
        }
        private void union(int x,int y){
            int rootX = root[x]; 
            int rootY = root[y]; 
            if(rootX!=rootY){  
                root[rootY] = rootX;
            }
        }
        private int find(int x){
            while(root[x]!=x){
                x = root[x];
            }
            return x;
        }
        private boolean connected(int x,int y){
            return find(x)==find(y);
        }
    }