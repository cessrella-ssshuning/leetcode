class Solution {
    /*
    equations [["a","b"],["b","c"],["bc","cd"]]
    values      1.5       2.5       5
    queries   [["a","c"],["c","b"],["bc","cd"]
    a->1.5b b->2.5c
            b->5d
    a ---->c 1.5*2.5
    a/c
    c -> b look up map c&b
    1/2.5 = 0.4
    bc/cd = b/d = 5
    cd/bc = d/b = 5
    */
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        double[] res = new double[queries.size()];
        Map<String,Map<String,Double>> map = new HashMap<>();
        for(int i = 0;i<values.length;i++){
            map.putIfAbsent(equations.get(i).get(0),new HashMap<>());
            map.get(equations.get(i).get(0)).put(equations.get(i).get(1),values[i]);
            map.putIfAbsent(equations.get(i).get(1),new HashMap<>());
            map.get(equations.get(i).get(1)).put(equations.get(i).get(0),1.0/values[i]);
        }
        for(int i = 0;i<queries.size();i++){
            res[i] = dfs(queries.get(i).get(0),queries.get(i).get(1),map,new HashSet<>());
        }
        return res;
    }
    private double dfs(String st,String end,Map<String,Map<String,Double>> map,Set<String> visited){
        if(!map.containsKey(st)){
            return -1.0;
        }
        if(map.get(st).containsKey(end)){
            return map.get(st).get(end);
        }
        if(!visited.contains(st)){
            visited.add(st);
            for(Map.Entry<String,Double> neighbour:map.get(st).entrySet()){
                double val = dfs(neighbour.getKey(),end,map,visited);
                if(val!=-1.0)
                    return val*neighbour.getValue();
                
            }
        }
        
        return -1.0;
    }
}