class Solution {
    public TreeNode recoverFromPreorder(String S) {
        Stack<TreeNode> stack = new Stack<>();
        int i = 0,j = 0;
        int level = 0;
        while(i<S.length()){
         //   j = i;
            while(j<S.length()&&S.charAt(j)=='-'){
                j++;
            }
            level = j-i;
            i = j;
            int val = 0;
            while(j<S.length()&&S.charAt(j)!='-'){
                val = 10*val+(S.charAt(j)-'0');
                j++;
            }
            i = j;
            TreeNode node = new TreeNode(val);
            
            while(stack.size()>level) stack.pop();
            
            if(!stack.isEmpty()&&node.val!=0){
                if(stack.peek().left==null){
                    stack.peek().left = node;
                }else{
                    stack.peek().right = node;
                }
            }
            stack.push(node);
        }
        while(stack.size()>1) stack.pop();
        return stack.pop();
    }
}