class Solution {
    /*
    [1,3,4,8]
    [0,1,1,1] 1
    [0,0,0,0] 2
    [0,1,1,1] 3
    [0,0,1,1] 4
    [0,0,0,0] 5
    [0,0,0,0] 6
    [0,0,0,0] 7
    [0,0,0,1] 8
      ...
    [0,1] -> 1 -> presum[1] - 0 = 1 - 0 = 1
    [1,2] -> 1 -> presum[2] - presum[0] = 1
    
    */
    public int[] minDifference(int[] nums, int[][] queries) {
        int n = nums.length;
        int[][] presum = new int[101][n];//records how many numbers from 1-100 exists in nums[0:j]
        for(int i = 1;i<=100;i++){
            for(int j = 0;j<n;j++){
                presum[i][j] = (j==0?0:presum[i][j-1])+(nums[j]==i?1:0);
                
            }
            
        }
    
        int[] res = new int[queries.length];
        int k = 0;
            
        for(int[] query:queries){
            List<Integer> rangeNum = new ArrayList<>();
            for(int i = 1;i<=100;i++){
                int st = query[0];
                int end = query[1];
                // this means how many times number i appears within range[st,end]
                int num = presum[i][end]-(st==0?0:presum[i][st-1]);
             //   System.out.println(num);
                if(num>0){
                    rangeNum.add(i);
                }
                int size = rangeNum.size();
                if(size>=2&&rangeNum.get(size-1)-rangeNum.get(size-2)==1){
                    break;
                }
            }
            if(rangeNum.size()<=1){
                res[k++] = -1;
                continue;
            }else{
                int min = Integer.MAX_VALUE;
                for(int p = 0;p<rangeNum.size()-1;p++){
                    if(rangeNum.get(p+1)==rangeNum.get(p)){
                        min = -1;
                    }else{
                        min = Math.min(min,rangeNum.get(p+1)-rangeNum.get(p));
                    }

                }
                res[k] = min;    
                k++;
            }
            
        }
        return res;
    }
}