class Solution {
    /*
    [2,1,5,6,2,3]
     0 1 2 3 4 5
    left smaller [-1,-1,1,2,1,4]
    right smaller[1, 6, 4,4,6,6]
    if height[i]<stack.pop(),keep popping the top elements so that we can get the boundary of the rectangle
    height[i]<stack.pop(),
    stack(1,)
    */
    public int largestRectangleArea(int[] heights) {
        Deque<Integer> deque = new ArrayDeque<>();
        int[] leftSmaller = new int[heights.length];
        Arrays.fill(leftSmaller,-1);
        int[] rightSmaller = new int[heights.length];
        Arrays.fill(rightSmaller,heights.length);
        //from left to right
        for(int i = 0;i<heights.length;i++){
            if(deque.isEmpty()){
                deque.push(i);
            }else{
                while(!deque.isEmpty()&&heights[i]<=heights[deque.peek()]){
                    deque.pop();
                }   
                if(!deque.isEmpty())
                    leftSmaller[i] = deque.peek();
                deque.push(i);
            }
        }
        deque.clear();
        for(int i = heights.length-1;i>=0;i--){
            if(deque.isEmpty()){
                deque.push(i);
            }else{
                while(!deque.isEmpty()&&heights[i]<heights[deque.peek()]){
                    deque.pop();
                }
                if(!deque.isEmpty())
                    rightSmaller[i] = deque.peek();
                deque.push(i);
            }
        }
        int area = 0;
        for(int i = 0;i<heights.length;i++){
            int width = rightSmaller[i]-leftSmaller[i]-1;
            area = Math.max(area,width*heights[i]);
        }
        return area;
    }
}
