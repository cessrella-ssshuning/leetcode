class Solution {
    /*
    [2,1][3,4][3,2]
    map(2,(1,3))(1,2)(3,(4,2))(4,3)
    indegree(2,2)(1,1)(4,1)(3,2)
    1 -> 2 -> 3 -> 4
    */
    public int[] restoreArray(int[][] adjacentPairs) {
        Map<Integer,List<Integer>> graph = new HashMap<>();
        Map<Integer,Integer> indegree = new HashMap<>();
        for(int[] pair:adjacentPairs){
            graph.putIfAbsent(pair[0],new ArrayList<>());
            graph.get(pair[0]).add(pair[1]);
            graph.putIfAbsent(pair[1],new ArrayList<>());
            graph.get(pair[1]).add(pair[0]);
            indegree.put(pair[0],indegree.getOrDefault(pair[0],0)+1);
            indegree.put(pair[1],indegree.getOrDefault(pair[1],0)+1);
        }
        Queue<Integer> queue = new LinkedList<>();
        for(Map.Entry<Integer,Integer> entry:indegree.entrySet()){
            if(entry.getValue()==1){
                queue.offer(entry.getKey());
                break;
            }
        }
        List<Integer> list = new ArrayList<>();
        Set<Integer> set = new HashSet<>();
        while(!queue.isEmpty()){
            int node = queue.poll();
            list.add(node);
            set.add(node);
            List<Integer> next = graph.get(node);
         //   System.out.println(next);
            for(int i:next){
                if(set.contains(i)) continue;
                queue.offer(i);
            }    
        }
        int[] res = new int[list.size()];
        for(int i = 0;i<res.length;i++){
            res[i] = list.get(i);
        }
        return res;
    }
}