class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(o->nums.get(o[0]).get(o[1])));
        int max = Integer.MIN_VALUE;
        int start = 0;
        int end = Integer.MAX_VALUE;
        for(int i = 0;i<nums.size();i++){
            pq.offer(new int[]{i,0});
            max = Math.max(max,nums.get(i).get(0));
        }
        while(pq.size()==nums.size()){
            int[] e = pq.poll();
            int row = e[0];
            int col = e[1];
            if(end-start>max-nums.get(row).get(col)){
                end = max;
                start = nums.get(row).get(col);
            }
            if(col+1<nums.get(row).size()){
                pq.offer(new int[]{row,col+1});
                max = Math.max(max,nums.get(row).get(col+1));
            }
        }
        return new int[]{start,end};
        
    }
}
// [4,10,15,24,26]
// [0,9,12,20]
// [5,18,22,30]
// 26,20,30    10
// 26 20 22     6
// 24 20 22     4
// 15 20 22     7
// 15 12 22     10
// 15 12 18     6