class Solution {
    public int[] sortArray(int[] nums) {
        partition(nums,0,nums.length-1);
        return nums;
    }
    private void partition(int[] nums,int st,int end){
        if(st==end) return;
        else if(st<end){
            int mid = st+(end-st)/2;
            partition(nums,st,mid);
            partition(nums,mid+1,end);
            merge(nums,st,mid,end);
        }
    }
    private void merge(int[] nums,int st,int mid,int end){
        int[] arr = new int[end-st+1];
        for(int i = st;i<=end;i++){
            arr[i-st] = nums[i];
        }
        int left = st;
        int right = mid+1;
        int index = st;
        while(left<=mid&&right<=end){
            if(arr[left-st]<arr[right-st]){
                nums[index] = arr[left-st];
                left++;
            }else{
                nums[index] = arr[right-st];
                right++;
            }
            index++;
        }
        while(left<=mid){
            nums[index++] = arr[left-st];
            left++;
        }
       
    }
}

class Solution {
    /*
      5,2,3,1
            ^
    */
    public int[] sortArray(int[] nums) {
        quickSort(nums,0,nums.length-1);
        return nums;
    }
    private void quickSort(int[] nums,int st,int end){
        if(st>=end) return;
        int index = partition(nums,st,end);
        quickSort(nums,st,index-1);
        quickSort(nums,index+1,end);
    
    }
    private int partition(int[] nums,int st,int end){
        int pivot = nums[end];
        int leftLarger = st;
        int rightSmaller = end-1;
        while(leftLarger<=rightSmaller){
            while(leftLarger<end&&nums[leftLarger]<pivot) leftLarger++;
            while(rightSmaller>=st&&nums[rightSmaller]>pivot) rightSmaller--;
            if(leftLarger>=rightSmaller) {//this step is very important, can become infinite loop if without this break
                break;
            }else{
                swap(nums,leftLarger,rightSmaller);
                leftLarger++;
                rightSmaller--;
            }
        }
        swap(nums,leftLarger,end);
        return leftLarger;
    }
    private void swap(int[] nums,int i,int j){
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
    
}