class Solution {
    /*
    [3,4,5,5,6]
    */
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for(int num:nums){
            pq.offer(num);
            if(pq.size()>k){
                pq.poll();
            }
        }
        return pq.peek();
        
    }
}
class Solution {
    /*
    [3,4,5,5,6]
    quick select
    */
    public int findKthLargest(int[] nums, int k) {
        int start = 0, end = nums.length - 1, index = nums.length - k;
        while (start < end) {
            int pivot = partition(nums,start,end);
            if(pivot>index){
                end = pivot-1;
            }else if(pivot<index){
                start = pivot+1;
            }else{
                return nums[pivot];
            }
        }
        return nums[start];
    }

    private int partition(int[] nums, int start, int end) {
        int pivot = start, temp;
        int leftLarger = start+1;
        int rightSmaller = end;
        while (leftLarger<=rightSmaller) {
            while (leftLarger <= end && nums[leftLarger] < nums[pivot]) leftLarger++;
            while (rightSmaller > start && nums[rightSmaller] > nums[pivot]) rightSmaller--;
            if (leftLarger>=rightSmaller) break;
            temp = nums[leftLarger];
            nums[leftLarger] = nums[rightSmaller];
            nums[rightSmaller] = temp;
            leftLarger++;
            rightSmaller--;
        }
        temp = nums[rightSmaller];
        nums[rightSmaller] = nums[pivot];
        nums[pivot] = temp;
        return rightSmaller;
    }
}