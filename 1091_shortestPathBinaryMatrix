class Solution {
    /*
     0  0  0
     1  1  0
     1  1  1
    */
    public int shortestPathBinaryMatrix(int[][] grid) {
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0,0});
        int[][] dirs = new int[][]{{1,0},{0,1},{-1,0},{0,-1},{1,1},{1,-1},{-1,1},{-1,-1}};
        int len = 1;
        if(grid[0][0]==1||grid[grid.length-1][grid[0].length-1]==1) return -1;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0;i<size;i++){
                int[] coor = queue.poll();
                if(coor[0]==grid.length-1&&coor[1]==grid[0].length-1) return len;
                for(int[] dir:dirs){
                    int x = coor[0]+dir[0];
                    int y = coor[1]+dir[1];
                    if(x<0||x>=grid.length||y<0||y>=grid[0].length||grid[x][y]==1) continue;
                    grid[x][y] = 1;
                    queue.offer(new int[]{x,y});
                }
            }
            len++;      
        }
        return -1;
    }
}