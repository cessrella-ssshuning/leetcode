class Solution {
    List<List<Integer>> res;
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        res = new ArrayList<>();
        dfs(candidates,target,0,new ArrayList<>());
        return res;
    }
    private void dfs(int[] candidates,int target,int st,List<Integer> list){
        if(target<0) return;
        if(target==0){
            res.add(new ArrayList<>(list));
            return;
        }else{
            for(int i = st;i<candidates.length;i++){
                list.add(candidates[i]);
                dfs(candidates,target-candidates[i],i,list);
                list.remove(list.size()-1);
                
            }
        }
        
    }
}